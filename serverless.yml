service: severless-node-dynamo-demo

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE: todostbl-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"
custom:
  COGNITO_USER_POOL: ${self:service.name}_user-pool
  COGNITO_CLIENT: ${self:service.name}_cognito-client
  COGNITO_IDENTITY_POOL: serverless_static_site_cognito_identity_pool
  COGNITO_APP_AUTH_ROLE: ${self:service.name}_cognito-appAuthRole
  # COGNITO_APP_UNAUTH_ROLE: ${self:service.name}_cognito-appUnauthRole

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
          authorizer: aws_iam

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: todostbl-${opt:stage, self:provider.stage}
    #We are adding the CORS headers to the ApiGatewayRestApi resource in our app
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    #Configure Cognito User Pool in Serverless

    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.COGNITO_USER_POOL}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.COGNITO_CLIENT}
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.COGNITO_IDENTITY_POOL}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          # unauthenticated:
          #   Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.COGNITO_APP_AUTH_ROLE}
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    # CognitoUnauthRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: ${self:custom.COGNITO_APP_UNAUTH_ROLE}
    #     Path: /
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Federated: "cognito-identity.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRoleWithWebIdentity"
    #           Condition:
    #             StringEquals:
    #               "cognito-identity.amazonaws.com:aud":
    #                 Ref: CognitoIdentityPool
    #             "ForAnyValue:StringLike":
    #               "cognito-identity.amazonaws.com:amr": unauthenticated
    #     Policies:
    #       - PolicyName: "CognitoUnauthorizedPolicy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "mobileanalytics:PutEvents"
    #                 - "cognito-sync:*"
    #                 - "cognito-identity:*"
    #               Resource: "*"
